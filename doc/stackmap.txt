=============================================================================
Table of Contents                                            *comment.contents*

Introduction ·················································· |stackmap-nvim|
Usage ························································ |stackmap-usage|
Examples ·················································· |stackmap-examples|

=============================================================================
Introduction                                                    *stackmap-nvim*

This plugin helps you to push a bunch of maps on some event, and then
pop them when you're done with that event. See |stackmap-examples| for examples

=============================================================================
Usage                                                          *stackmap-usage*

                                                               *stackmap.push()*
push({name}, {mode}, {mappings})

    Push the {name} mappings for a particular {mode}. Mappings is the takes
    the same format as |vim.keymap.set()| >

        stackmap.push("example", "n", {
            {"<space>st", "echo 'Wow, this got mapped!'", { silent = true },
            ...
        })

<
                                                                *stackmap.pop()*
pop({name}, {mode})

    Pop the {name} mappings. Restores original mappings from before calling
    |stackmap.push()|

=============================================================================
Examples                                                    *stackmap-examples*

You can use |stackmap-nvim| to emulate |lsp| on_attch function in |dap| by
using dap listeners so that your debugger keymaps be active only when |dap|
starts: >

      dap.listeners.after["event_initialized"]["me"] = function()
        push("debug_mode", "n", {
          {
            "<F7>",
            function(_)
              dap.terminate(_, _, function()
                dap.repl.close()
                dapui.close()
              end)
            end,
            { desc = "Dap terminate" },
          },
          { "<F10>", dap.step_over, { desc = "Dap step over" } },
          { "<F11>", dap.step_into, { desc = "Dap step into" } },
          { "<F12>", dap.step_out, { desc = "Dap step out" } },
          { "<leader>rc", dap.run_to_cursor, { desc = "Dap run to cursor" } },
          { "<leader>dp", dap.pause, { desc = "Dap pause" } },
          { "K", require("dap.ui.widgets").hover, { desc = "Dap hover" } },
        })
      end

      dap.listeners.after["event_terminated"]["me"] = function()
        pop("debug_mode", "n")
      end

<
 vim:tw=78:ts=8:ft=help:norl:
